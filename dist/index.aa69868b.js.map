{"mappings":"AAAA;AAEA,mBAAmB;AACnB,MAAM,gBAAgB,SAAS,cAAc;AAC7C,MAAM,WAAW,SAAS,cAAc;AACxC,MAAM,YAAY,SAAS,cAAc;AACzC,MAAM,WAAW,SAAS,cAAc;AACxC,MAAM,QAAQ,SAAS,cAAc;AACrC,MAAM,aAAa,SAAS,cAAc;AAE1C,yBAAyB;AACzB,MAAM,OAAO,IAAI;AAEjB,6CAA6C;AAC7C,IAAI,YAAY,KAAK,MAAM,aAAa,QAAQ,iBAAiB,EAAE;AAEnE,0CAA0C;AAC1C,IAAI,aAAa,QAAQ,cAAc;IACnC,MAAM,kBAAkB,KAAK,MAAM,aAAa,QAAQ;IACxD,IAAI,MAAM,QAAQ,kBAAkB;QAChC,YAAY;QACZ,UAAU,QAAQ,CAAC;YACf,MAAM,YAAY,SAAS,cAAc;YACzC,UAAU,YAAY,SAAS;YAC/B,MAAM,YAAY;QAClB,uDAAuD;QACvD,oDAAoD;QACxD;IACJ;AACJ;AAGA,MAAM,UAAU;IACZ,MAAM,gBAAgB,SAAS,MAAM;IAErC,6CAA6C;IAC7C,IAAI,kBAAkB,IAAI;QAEtB,kDAAkD;QAClD,MAAM,OAAO;YACT,MAAM;YACN,WAAW;QACf;QAEA,2DAA2D;QAC3D,UAAU,KAAK;QAEf;QAEA,qDAAqD;QACrD,uCAAuC;QACvC,MAAM,YAAY,SAAS,cAAc;QACzC,UAAU,YAAY;QACtB,MAAM,YAAY;IACtB;IAEA,oDAAoD;IACpD,IAAI,iBAAiB,IACjB;AAER;AAGA,2CAA2C;AAC3C,UAAU,iBAAiB,SAAS;IAChC;IACA,kEAAkE;IAClE,SAAS,QAAQ;AACrB;AAEA,4CAA4C;AAC5C,WAAW,iBAAiB,SAAS;IACjC,aAAa,WAAW;IACxB,SAAS;AACb;AAEA,iCAAiC;AACjC,SAAS,iBAAiB,SAAS;IAC/B,aAAa;IACb,SAAS;AACb;AAEA,4BAA4B;AAC5B,MAAM,sBAAsB;IACxB,aAAa,QAAQ,aAAa,KAAK,UAAU;AACrD","sources":["src/js/main.js"],"sourcesContent":["'use strict';\r\n\r\n// Global Variables\r\nconst toDoContainer = document.querySelector('.toDoContainer');\r\nconst inputBox = document.querySelector('.inputBox');\r\nconst submitBtn = document.querySelector('.submitBtn');\r\nconst resetBtn = document.querySelector('.resetBtn');\r\nconst tasks = document.querySelector('.tasks');\r\nconst deleteItem = document.querySelector('.deleteItem');\r\n\r\n// Get's the current date\r\nconst date = new Date();\r\n\r\n// A blank array to hold onto the to-do items\r\nlet toDoItems = JSON.parse(localStorage.getItem('toDoItems')) || [];\r\n\r\n// Getting local storgae to the to-do list\r\nif (localStorage.getItem('toDoItems')) {\r\n    const storedToDoItems = JSON.parse(localStorage.getItem('toDoItems'));\r\n    if (Array.isArray(storedToDoItems)) {\r\n        toDoItems = storedToDoItems;\r\n        toDoItems.forEach((toDoItem) => {\r\n            const newToDoEl = document.createElement('p');\r\n            newToDoEl.innerText = toDoItem.text;\r\n            tasks.appendChild(newToDoEl);\r\n            // let html = '<button class=\"deleteItem\">üóëÔ∏è</button>'\r\n            // deleteItem.insertAdjacentHTML('beforeend', html);\r\n        });\r\n    }\r\n}\r\n\r\n\r\nconst addItem = function () {\r\n    const inputBoxValue = inputBox.value.trim();\r\n\r\n    // Checks to see if a value has been inputted\r\n    if (inputBoxValue !== '') {\r\n\r\n        // Create a new to-do item and add it to the array\r\n        const toDo = {\r\n            text: inputBoxValue,\r\n            completed: false\r\n        };\r\n\r\n        // Push the to-do items to the toDoItems array to be posted\r\n        toDoItems.push(toDo);\r\n\r\n        settingLocalStorage();\r\n\r\n        // Add a new HTML item in the form of a list(li) when\r\n        // the \"Submit\" button has been pressed\r\n        const newToDoEl = document.createElement('p');\r\n        newToDoEl.innerText = inputBoxValue;\r\n        tasks.appendChild(newToDoEl);\r\n    }\r\n\r\n    // If the entry is empty do not post this to-do item\r\n    if (inputBoxValue == '') {\r\n        return\r\n    }\r\n}\r\n\r\n\r\n// Setting local storage for the to-do list\r\nsubmitBtn.addEventListener('click', function () {\r\n    addItem();\r\n    // Resets the input box value to blank when an item has been added\r\n    inputBox.value = '';\r\n});\r\n\r\n// Create a delete button for specific items\r\ndeleteItem.addEventListener('click', function () {\r\n    localStorage.removeItem('toDoItem')\r\n    location.reload();\r\n})\r\n\r\n// Resets the list of all entries\r\nresetBtn.addEventListener('click', function () {\r\n    localStorage.clear();\r\n    location.reload();\r\n});\r\n\r\n// Setting the local storage\r\nconst settingLocalStorage = function () {\r\n    localStorage.setItem('toDoItems', JSON.stringify(toDoItems));\r\n}\r\n"],"names":[],"version":3,"file":"index.aa69868b.js.map","sourceRoot":"/__parcel_source_root/"}